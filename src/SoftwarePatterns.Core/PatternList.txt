Pattern List

Creational patterns:

Abstract factory:
	Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
Builder:
	Separate the construction of a complex object from its representation allowing the same construction process to create various representations.	
Factory method:
	Define an interface for creating a single object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.
Lazy Loading	
	Tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed.

	
Structural patterns:

Adapter or Wrapper or Translator:
	Convert the interface of a class into another interface clients expect. An adapter lets classes work together that could not otherwise because of incompatible interfaces. 
Bridge	
	Decouple an abstraction from its implementation allowing the two to vary independently.
Composite	
	Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.
Decorator:
	Attach additional responsibilities to an object dynamically keeping the same interface. Decorators provide a flexible alternative to subclassing for extending functionality.
Facade:
	Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.
Flyweight:
	Use sharing to support large numbers of similar objects efficiently.
Proxy:
	Provide a surrogate or placeholder for another object to control access to it. (Also used in lazy loading)

	
Behavioural patterns:

Chain of responsibility:
	Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.
Command:
	Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.
Interpreter:
	Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.
Iterator:
	Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.
Mediator:
	Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.
Memento:
	Without violating encapsulation, capture and externalize an object's internal state allowing the object to be restored to this state later.	Yes	No	N/A
Null object:
	Avoid null references by providing a default object.